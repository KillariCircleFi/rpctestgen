package testgen

import (
	"errors"
	"fmt"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/ethereum/go-ethereum/rpc"
)

func checkHeaderRLP(t *T, n uint64, got []byte) error {
	head := t.chain.GetHeaderByNumber(n)
	if head == nil {
		return fmt.Errorf("unable to load block %d from test chain", n)
	}
	want, err := rlp.EncodeToBytes(head)
	if err != nil {
		return err
	}
	if hexutil.Encode(got) != hexutil.Encode(want) {
		return fmt.Errorf("unexpected response (got: %s, want: %s)", got, hexutil.Bytes(want))
	}
	return nil
}

func checkBlockRLP(t *T, n uint64, got []byte) error {
	head := t.chain.GetBlockByNumber(n)
	if head == nil {
		return fmt.Errorf("unable to load block %d from test chain", n)
	}
	want, err := rlp.EncodeToBytes(head)
	if err != nil {
		return err
	}
	if hexutil.Encode(got) != hexutil.Encode(want) {
		return fmt.Errorf("unexpected response (got: %s, want: %s)", got, hexutil.Bytes(want))
	}
	return nil
}

// I guess Go doesn't have uint256 type?
func checkBlockNumber(value hexutil.Uint64, expected hexutil.Uint64) error {
	if value != expected {
		return fmt.Errorf("unexpected block number value(have: %d, want: %d)", value, expected)
	}
	return nil
}

func checkBlockHash(value common.Hash, expected common.Hash) error {
	if value != expected {
		return fmt.Errorf("unexpected block hash value(have: %d, want: %d)", value, expected)
	}
	return nil
}

func checkStatus(value hexutil.Uint64, expected hexutil.Uint64) error {
	if value != expected {
		return fmt.Errorf("expected status (have: %d, want: %d)", value, expected)
	}
	return nil
}

func checkError(err error, expectedErrorCode int) error {
	var ec rpc.Error
	if !errors.As(err, &ec) {
		return fmt.Errorf("expected error (have: some other output, want: %d)", expectedErrorCode)
	}
	if errors.As(err, &ec) && ec.ErrorCode() != expectedErrorCode {
		return fmt.Errorf("expected error (have: %d, want: %d)", ec.ErrorCode(), expectedErrorCode)
	}
	return nil
}

func blockHashCallerByteCode() *hexutil.Bytes {
	//Solidity code:
	//contract blockHashCaller {
	//	function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {
	//		blockHash = blockhash(blockNumber);
	//	}
	//}
	return hex2Bytes("6080604052348015600f57600080fd5b506004361060285760003560e01c8063ee82ac5e14602d575b600080fd5b60436004803603810190603f91906098565b6057565b604051604e919060d7565b60405180910390f35b600081409050919050565b600080fd5b6000819050919050565b6078816067565b8114608257600080fd5b50565b6000813590506092816071565b92915050565b60006020828403121560ab5760aa6062565b5b600060b7848285016085565b91505092915050565b6000819050919050565b60d18160c0565b82525050565b600060208201905060ea600083018460ca565b9291505056fea2646970667358221220a4d7face162688805e99e86526524ac3dadfb01cc29366d0d68b70dadcf01afe64736f6c63430008120033")
}

func selfDestructor() *hexutil.Bytes {
	//Solidity code:
	//contract SelfDestructor {
	//	function destroy() public {
	//		selfdestruct(payable(0x0));
	//	}
	//}
	return hex2Bytes("6080604052348015600f57600080fd5b506004361060285760003560e01c806383197ef014602d575b600080fd5b60336035565b005b600073ffffffffffffffffffffffffffffffffffffffff16fffea26469706673582212208e566fde20a17fff9658b9b1db37e27876fd8934ccf9b2aa308cabd37698681f64736f6c63430008120033")
}

func getCode() *hexutil.Bytes {
	//library GetCode {
	//	function at(address addr) public view returns (bytes memory code) {
	//		assembly {
	//			// retrieve the size of the code, this needs assembly
	//			let size := extcodesize(addr)
	//			// allocate output byte array - this could also be done without assembly
	//			// by using code = new bytes(size)
	//			code := mload(0x40)
	//			// new "memory end" including padding
	//			mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
	//			// store length in memory
	//			mstore(code, size)
	//			// actually retrieve the code, this needs assembly
	//			extcodecopy(addr, add(code, 0x20), 0, size)
	//		}
	//	}
	//}
	return hex2Bytes("73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063dce4a4471461003a575b600080fd5b610054600480360381019061004f91906100f8565b61006a565b60405161006191906101b5565b60405180910390f35b6060813b6040519150601f19601f602083010116820160405280825280600060208401853c50919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100c58261009a565b9050919050565b6100d5816100ba565b81146100e057600080fd5b50565b6000813590506100f2816100cc565b92915050565b60006020828403121561010e5761010d610095565b5b600061011c848285016100e3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561015f578082015181840152602081019050610144565b60008484015250505050565b6000601f19601f8301169050919050565b600061018782610125565b6101918185610130565b93506101a1818560208601610141565b6101aa8161016b565b840191505092915050565b600060208201905081810360008301526101cf818461017c565b90509291505056fea26469706673582212206a5f0cd9f230619fa520fc4b9d4b518643258cad412f2fa33945ce528b4b895164736f6c63430008120033")
}
func gasSpender() *hexutil.Bytes {
	//contract GasSpender {
	//	function spendGas(gasToSpend: uint) view external {
	//		uint public gasLeftInitially = gasleft();
	//		while(true) {
	//			if (gasLeftInitially - gasleft() >= gasToSpend) return;
	//		}
	//	}
	//}
	return hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063815b8ab414610030575b600080fd5b61004a600480360381019061004591906100b6565b61004c565b005b60005a90505b60011561007657815a826100669190610112565b106100715750610078565b610052565b505b50565b600080fd5b6000819050919050565b61009381610080565b811461009e57600080fd5b50565b6000813590506100b08161008a565b92915050565b6000602082840312156100cc576100cb61007b565b5b60006100da848285016100a1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061011d82610080565b915061012883610080565b92508282039050818111156101405761013f6100e3565b5b9291505056fea2646970667358221220a659ba4db729a6ee4db02fcc5c1118db53246b0e5e686534fc9add6f2e93faec64736f6c63430008120033")
}

func getRevertingContract() *hexutil.Bytes {
	//contract RevertingContract {
	//	fallback() payable external {
	//		require(false, "Always reverting contract");
	//	}
	//}
	return hex2Bytes("608060405260006042576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401603990609d565b60405180910390fd5b005b600082825260208201905092915050565b7f416c7761797320726576657274696e6720636f6e747261637400000000000000600082015250565b600060896019836044565b91506092826055565b602082019050919050565b6000602082019050818103600083015260b481607e565b905091905056fea264697066735822122005cbbbc709291f66fadc17416c1b0ed4d72941840db11468a21b8e1a0362024c64736f6c63430008120033")
}

func getEthForwarder() *hexutil.Bytes {
	//contract EthForwarder {
	//	function execute(address payable forwardTo) payable external {
	//		bool sent = forwardTo.send(msg.value);
	//		require(sent, "Failed to send Ether");
	//	}
	//}
	return hex2Bytes("60806040526004361061001e5760003560e01c80634b64e49214610023575b600080fd5b61003d6004803603810190610038919061011f565b61003f565b005b60008173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050509050806100b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100af906101a9565b60405180910390fd5b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081359050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061019360148361014c565b915061019e8261015d565b602082019050919050565b600060208201905081810360008301526101c281610186565b905091905056fea2646970667358221220563acd6f5b8ad06a3faf5c27fddd0ecbc198408b99290ce50d15c2cf7043694964736f6c63430008120033")
}

func getEcRecoverOverride() *hexutil.Bytes {
	/*
		pragma solidity ^0.8.18;

		contract ecRecoverOverride {
		    struct EcRecoverOverrideParams {
		        bytes32 hash;
		        uint8 v;
		        bytes32 r;
		        bytes32 s;
		        address returnAddress;
		    }
		    mapping(bytes32 => address) overrideToAddress;
		    address movedEcRecoverAddress = address(0x123456);

		    function setOverride(bytes32 hash, uint8 v, bytes32 r, bytes32 s, address returnAddress) public {
		        require(returnAddress != address(0x0), 'return address cannot be 0x0');
		        overrideToAddress[keccak256(abi.encodePacked(hash, v, r, s))] = returnAddress;
		    }

		    function setOverrides(EcRecoverOverrideParams[] memory overrides) public {
		        for (uint i = 0; i < overrides.length; i++) {
		            setOverride(overrides[i].hash, overrides[i].v, overrides[i].r, overrides[i].s, overrides[i].returnAddress);
		        }
		    }

		    fallback (bytes calldata input) external returns (bytes memory) {
		        (bytes32 hash, uint8 v, bytes32 r, bytes32 s) = abi.decode(input, (bytes32, uint8, bytes32, bytes32));
		        address overridedAddress = overrideToAddress[keccak256(abi.encodePacked(hash, v, r, s))];
		        if (overridedAddress == address(0x0)) {
		            (bool success, bytes memory data) = movedEcRecoverAddress.call(input);
		            require(success, 'failed to call moved ecrecover at address 0x123456');
		            return data;
		        } else {
		            return abi.encodePacked(overridedAddress);
		        }
		    }
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506004361061003a5760003560e01c806305fdbc8114610209578063c0069260146102255761003b565b5b60003660606000806000808686810190610055919061047d565b9350935093509350600080600086868686604051602001610079949392919061053b565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101d657600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a8a6040516101409291906105c8565b6000604051808303816000865af19150503d806000811461017d576040519150601f19603f3d011682016040523d82523d6000602084013e610182565b606091505b5091509150816101c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101be90610664565b60405180910390fd5b809750505050505050506101fe565b806040516020016101e791906106fe565b604051602081830303815290604052955050505050505b915050805190602001f35b610223600480360381019061021e919061092f565b610241565b005b61023f600480360381019061023a9190610978565b610307565b005b60005b8151811015610303576102f0828281518110610263576102626109f3565b5b602002602001015160000151838381518110610282576102816109f3565b5b6020026020010151602001518484815181106102a1576102a06109f3565b5b6020026020010151604001518585815181106102c0576102bf6109f3565b5b6020026020010151606001518686815181106102df576102de6109f3565b5b602002602001015160800151610307565b80806102fb90610a5b565b915050610244565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d90610aef565b60405180910390fd5b8060008087878787604051602001610391949392919061053b565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104218161040e565b811461042c57600080fd5b50565b60008135905061043e81610418565b92915050565b600060ff82169050919050565b61045a81610444565b811461046557600080fd5b50565b60008135905061047781610451565b92915050565b6000806000806080858703121561049757610496610404565b5b60006104a58782880161042f565b94505060206104b687828801610468565b93505060406104c78782880161042f565b92505060606104d88782880161042f565b91505092959194509250565b6000819050919050565b6104ff6104fa8261040e565b6104e4565b82525050565b60008160f81b9050919050565b600061051d82610505565b9050919050565b61053561053082610444565b610512565b82525050565b600061054782876104ee565b6020820191506105578286610524565b60018201915061056782856104ee565b60208201915061057782846104ee565b60208201915081905095945050505050565b600081905092915050565b82818337600083830152505050565b60006105af8385610589565b93506105bc838584610594565b82840190509392505050565b60006105d58284866105a3565b91508190509392505050565b600082825260208201905092915050565b7f6661696c656420746f2063616c6c206d6f7665642065637265636f766572206160008201527f7420616464726573732030783132333435360000000000000000000000000000602082015250565b600061064e6032836105e1565b9150610659826105f2565b604082019050919050565b6000602082019050818103600083015261067d81610641565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106af82610684565b9050919050565b60008160601b9050919050565b60006106ce826106b6565b9050919050565b60006106e0826106c3565b9050919050565b6106f86106f3826106a4565b6106d5565b82525050565b600061070a82846106e7565b60148201915081905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107678261071e565b810181811067ffffffffffffffff821117156107865761078561072f565b5b80604052505050565b60006107996103fa565b90506107a5828261075e565b919050565b600067ffffffffffffffff8211156107c5576107c461072f565b5b602082029050602081019050919050565b600080fd5b600080fd5b6107e9816106a4565b81146107f457600080fd5b50565b600081359050610806816107e0565b92915050565b600060a08284031215610822576108216107db565b5b61082c60a061078f565b9050600061083c8482850161042f565b600083015250602061085084828501610468565b60208301525060406108648482850161042f565b60408301525060606108788482850161042f565b606083015250608061088c848285016107f7565b60808301525092915050565b60006108ab6108a6846107aa565b61078f565b90508083825260208201905060a084028301858111156108ce576108cd6107d6565b5b835b818110156108f757806108e3888261080c565b84526020840193505060a0810190506108d0565b5050509392505050565b600082601f83011261091657610915610719565b5b8135610926848260208601610898565b91505092915050565b60006020828403121561094557610944610404565b5b600082013567ffffffffffffffff81111561096357610962610409565b5b61096f84828501610901565b91505092915050565b600080600080600060a0868803121561099457610993610404565b5b60006109a28882890161042f565b95505060206109b388828901610468565b94505060406109c48882890161042f565b93505060606109d58882890161042f565b92505060806109e6888289016107f7565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610a6682610a51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a9857610a97610a22565b5b600182019050919050565b7f72657475726e20616464726573732063616e6e6f742062652030783000000000600082015250565b6000610ad9601c836105e1565b9150610ae482610aa3565b602082019050919050565b60006020820190508181036000830152610b0881610acc565b905091905056fea26469706673582212202fa837f70cfab8ede041106e92528882f950de3f9900cfcba0f560e8bf8eb85764736f6c63430008120033")
}

func getEcRecoverCaller() *hexutil.Bytes {
	/*
		contract EcRecoverCaller {
			function callEcRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) pure external returns (address) {
				return ecrecover(hash, v, r, s);
			}
		}
	*/
	return hex2Bytes("608060405234801561001057600080fd5b506004361061002b5760003560e01c8063265dc68c14610030575b600080fd5b61004a6004803603810190610045919061012f565b610060565b60405161005791906101d7565b60405180910390f35b6000600185858585604051600081526020016040526040516100859493929190610210565b6020604051602081039080840390855afa1580156100a7573d6000803e3d6000fd5b505050602060405103519050949350505050565b600080fd5b6000819050919050565b6100d3816100c0565b81146100de57600080fd5b50565b6000813590506100f0816100ca565b92915050565b600060ff82169050919050565b61010c816100f6565b811461011757600080fd5b50565b60008135905061012981610103565b92915050565b60008060008060808587031215610149576101486100bb565b5b6000610157878288016100e1565b94505060206101688782880161011a565b9350506040610179878288016100e1565b925050606061018a878288016100e1565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101c182610196565b9050919050565b6101d1816101b6565b82525050565b60006020820190506101ec60008301846101c8565b92915050565b6101fb816100c0565b82525050565b61020a816100f6565b82525050565b600060808201905061022560008301876101f2565b6102326020830186610201565b61023f60408301856101f2565b61024c60608301846101f2565b9594505050505056fea26469706673582212206c520c25fdd1108030611d622b1aa1038ff1b4820f27608d6867d249c1e3ed7664736f6c63430008120033")
}

func getUint64Ptr(value hexutil.Uint64) *hexutil.Uint64 {
	newUint64 := new(hexutil.Uint64)
	newUint64 = &value
	return newUint64
}
